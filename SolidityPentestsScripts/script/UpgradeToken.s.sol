// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import {Script} from "forge-std/Script.sol";
import {ERC1967Proxy} from "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol";
import {DevOpsTools} from "lib/foundry-devops/src/DevOpsTools.sol";
import {HalbornToken} from "../src/HalbornToken_flattened.sol";
import {HalbornTokenV2} from "../src/HalbornToken_flattened_v2.sol";
import {HalbornNFT, HalbornNFTv2} from "../src/HalbornNFT_flattened.sol";

contract UpgradeToken is Script {
    function run() external returns (address) {
        address mostRecentlyDeployedProxy = DevOpsTools.get_most_recent_deployment("ERC1967Proxy", block.chainid);

        vm.startBroadcast();
        HalbornTokenV2 newToken = new HalbornTokenV2();
        vm.stopBroadcast();
        address proxy = upgradeToken(mostRecentlyDeployedProxy, address(newToken));
        return proxy;
    }

    function upgradeToken(address proxyAddress, address newToken) public returns (address) {
        vm.startBroadcast();
        HalbornToken proxy = HalbornToken(payable(proxyAddress));
        proxy.upgradeToAndCall(address(newToken),"");
        vm.stopBroadcast();
        return address(proxy);
    }

    function upgradeNFTToken(address proxyAddress, address newToken) public returns (address) {
        vm.startBroadcast();
        HalbornNFT proxy = HalbornNFT(payable(proxyAddress));
        proxy.upgradeToAndCall(address(newToken),"");
        vm.stopBroadcast();
        return address(proxy);
    }
}
