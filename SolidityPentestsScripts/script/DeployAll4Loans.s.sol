// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import {Script} from "forge-std/Script.sol";
import {ERC1967Proxy} from "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol";
import {HalbornNFT} from "../src/HalbornNFT_flattened.sol";
import {HalbornToken} from "../src/HalbornToken_flattened.sol";
import {HalbornLoans} from "../src/HalbornLoans_flattened.sol";

contract DeployAll4Loans is Script {
    function run() external returns (address Token,address NFT,address Loans) {
        //function startPrank(address sender, address origin) external;

        vm.startPrank(0x5B38Da6a701c568545dCfcB03FcB875f56beddC4,0x5B38Da6a701c568545dCfcB03FcB875f56beddC4);
        address nftProxyA = deployNFTToken();
        address tokenProxyA = deployToken();
        address loansProxyA = deployLoans(tokenProxyA, nftProxyA);
        //vm.prank(owner);
        HalbornToken(tokenProxyA).setLoans(loansProxyA);
        vm.stopPrank();
        return (tokenProxyA, nftProxyA ,loansProxyA);
    }

    function deployNFTToken() public returns (address) {
     //   vm.startBroadcast();
        HalbornNFT NFTToken= new HalbornNFT();
        ERC1967Proxy proxy = new ERC1967Proxy(address(NFTToken), "");
        HalbornNFT(address(proxy)).initialize(0x9d997719c0a5b5f6db9b8ac69a988be57cf324cb9fffd51dc2c37544bb520d65,2000); // merkle root , price of NFT colateral
      //  vm.stopBroadcast();
        return address(proxy);
    }

     function deployNFTTokenNoProxy() public returns (address) {
     //   vm.startBroadcast();
        HalbornNFT NFTToken= new HalbornNFT();

     //   vm.stopBroadcast();
        return address(NFTToken);
    }

    function deployToken() public returns (address) {
     //   vm.startBroadcast();
        HalbornToken Token= new HalbornToken();
        ERC1967Proxy proxy = new ERC1967Proxy(address(Token), "");
        HalbornToken(address(proxy)).initialize();
     //   vm.stopBroadcast();
        return address(proxy);
    }
//initialize(address token_, address nft_)
    function deployLoans(address token,address nft) public returns (address) {
    //    vm.startBroadcast();
        HalbornLoans loan= new HalbornLoans(2000);
        ERC1967Proxy proxy = new ERC1967Proxy(address(loan), "");
        HalbornLoans(address(proxy)).initialize(token,nft);
    //    vm.stopBroadcast();
        return address(proxy);
    }


}



